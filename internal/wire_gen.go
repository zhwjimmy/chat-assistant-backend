// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"chat-assistant-backend/internal/config"
	"chat-assistant-backend/internal/handlers"
	"chat-assistant-backend/internal/infra/elasticsearch"
	"chat-assistant-backend/internal/migrations"
	"chat-assistant-backend/internal/repositories"
	"chat-assistant-backend/internal/server"
	"chat-assistant-backend/internal/services"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApp initializes the application with all dependencies
func InitializeApp() (*server.Server, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := InitializeDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repositories.NewUserRepository(db)
	conversationRepository := repositories.NewConversationRepository(db)
	messageRepository := repositories.NewMessageRepository(db)
	client, err := NewElasticsearchClient(configConfig)
	if err != nil {
		return nil, err
	}
	searchRepository := NewElasticsearchRepository(client, configConfig)
	userService := services.NewUserService(userRepository)
	conversationService := services.NewConversationService(conversationRepository)
	messageService := services.NewMessageService(messageRepository)
	searchService := services.NewSearchService(searchRepository)
	userHandler := handlers.NewUserHandler(userService)
	conversationHandler := handlers.NewConversationHandler(conversationService)
	messageHandler := handlers.NewMessageHandler(messageService)
	searchHandler := handlers.NewSearchHandler(searchService)
	serverServer := NewServerWithDependencies(configConfig, db, userRepository, conversationRepository, messageRepository, searchRepository, userService, conversationService, messageService, searchService, userHandler, conversationHandler, messageHandler, searchHandler)
	return serverServer, nil
}

// wire.go:

// NewDatabase creates a new database connection
func NewDatabase(cfg *config.Config) (*gorm.DB, error) {
	dsn := cfg.Database.GetDSN()
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, err
	}

	return db, nil
}

// NewElasticsearchClient creates a new Elasticsearch client
func NewElasticsearchClient(cfg *config.Config) (*elasticsearch.Client, error) {
	esConfig := &elasticsearch.Config{
		Hosts:    cfg.Elasticsearch.Hosts,
		Username: cfg.Elasticsearch.Username,
		Password: cfg.Elasticsearch.Password,
		Timeout:  cfg.Elasticsearch.Timeout,
		Index: elasticsearch.IndexConfig{
			Conversations: cfg.Elasticsearch.Index.Conversations,
			Messages:      cfg.Elasticsearch.Index.Messages,
		},
	}

	return elasticsearch.NewClient(esConfig)
}

// NewElasticsearchIndexer creates a new Elasticsearch indexer
func NewElasticsearchIndexer(esClient *elasticsearch.Client, cfg *config.Config) repositories.ElasticsearchIndexer {
	return repositories.NewElasticsearchIndexer(esClient.GetClient(), cfg.Elasticsearch.Index.Conversations)
}

// NewElasticsearchRepository creates a new Elasticsearch repository
func NewElasticsearchRepository(esClient *elasticsearch.Client, cfg *config.Config) services.SearchRepository {
	return repositories.NewElasticsearchRepository(esClient.GetClient(), cfg.Elasticsearch.Index.Conversations)
}

// RunMigrations runs database migrations
func RunMigrations(db *gorm.DB) error {
	migrator, err := migrations.NewMigrator(db, nil)
	if err != nil {
		return err
	}

	return migrator.Up()
}

// InitializeDatabase creates database connection and runs migrations
func InitializeDatabase(cfg *config.Config) (*gorm.DB, error) {
	db, err := NewDatabase(cfg)
	if err != nil {
		return nil, err
	}

	if err := RunMigrations(db); err != nil {
		return nil, err
	}

	return db, nil
}

// NewServerWithDependencies creates a server with all dependencies injected
func NewServerWithDependencies(
	cfg *config.Config,
	db *gorm.DB,
	userRepo *repositories.UserRepository,
	conversationRepo *repositories.ConversationRepository,
	messageRepo *repositories.MessageRepository,
	searchRepo services.SearchRepository,
	userService *services.UserService,
	conversationService *services.ConversationService,
	messageService *services.MessageService,
	searchService *services.SearchService,
	userHandler *handlers.UserHandler,
	conversationHandler *handlers.ConversationHandler,
	messageHandler *handlers.MessageHandler,
	searchHandler *handlers.SearchHandler,
) *server.Server {
	return server.NewWithDependencies(cfg, db, userHandler, conversationHandler, messageHandler, searchHandler)
}
