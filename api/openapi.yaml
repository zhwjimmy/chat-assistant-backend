openapi: 3.0.3
info:
  title: Chat Assistant Backend API
  description: |
    A RESTful API for the Chat Assistant Backend service.
    This API provides endpoints for managing conversations and messages.
  version: 1.0.0
  contact:
    name: Chat Assistant Team
    email: support@chatassistant.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.chatassistant.com
    description: Production server

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the health status of the service
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                  service:
                    type: string
                    example: "chat-assistant-backend"

  /conversations:
    get:
      summary: List Conversations
      description: Retrieve a list of all conversations
      operationId: listConversations
      tags:
        - Conversations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Conversation
      description: Create a new conversation
      operationId: createConversation
      tags:
        - Conversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /conversations/{id}:
    get:
      summary: Get Conversation
      description: Retrieve a specific conversation by ID
      operationId: getConversation
      tags:
        - Conversations
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /messages:
    get:
      summary: List Messages
      description: Retrieve messages for a specific conversation
      operationId: listMessages
      tags:
        - Messages
      parameters:
        - name: conversation_id
          in: query
          required: true
          description: Conversation ID to filter messages
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Message
      description: Create a new message
      operationId: createMessage
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the conversation
        title:
          type: string
          description: Title of the conversation
        created_at:
          type: string
          format: date-time
          description: When the conversation was created
        updated_at:
          type: string
          format: date-time
          description: When the conversation was last updated
      required:
        - id
        - title
        - created_at
        - updated_at

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message
        conversation_id:
          type: string
          format: uuid
          description: ID of the conversation this message belongs to
        role:
          type: string
          enum: [user, assistant, system]
          description: Role of the message sender
        content:
          type: string
          description: Content of the message
        created_at:
          type: string
          format: date-time
          description: When the message was created
        updated_at:
          type: string
          format: date-time
          description: When the message was last updated
      required:
        - id
        - conversation_id
        - role
        - content
        - created_at
        - updated_at

    CreateConversationRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the conversation
          minLength: 1
          maxLength: 255
      required:
        - title

    CreateMessageRequest:
      type: object
      properties:
        conversation_id:
          type: string
          format: uuid
          description: ID of the conversation
        role:
          type: string
          enum: [user, assistant, system]
          description: Role of the message sender
        content:
          type: string
          description: Content of the message
          minLength: 1
      required:
        - conversation_id
        - role
        - content

    ConversationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Conversation'

    ConversationListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'

    MessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Message'

    MessageListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Error message
              example: "Validation error"
            details:
              type: string
              description: Additional error details
              example: "Title is required"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Conversations
    description: Conversation management
  - name: Messages
    description: Message management
